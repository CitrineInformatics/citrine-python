.. data_extraction:

Data Extraction
===============

Ara is a component of the Citrine Platform data service that extracts data from GEMD's complex and expressive graphical representations into a tabular structure (like a CSV file) that is easier to consume in analytical contexts.  The rows in the resulting Ara Table are in 1-to-1 correspondence with the set of material histories.  Columns correspond to data about the material histories, such as the temperature measured in a kiln used at a specific manufacturing step.

Row
---

A Row object describes a mapping from a dataset to rows of a table. The only such mapping presently supported is :class:`citrine.informatics.ara.MaterialRunByTemplate`, which produces one row per Material Run associated with any of a list of material templates.

.. code-block:: python

   from citrine.ara.rows import MaterialRunByTemplate
   row_def = MaterialRunByTemplate(
         templates=[LinkByUID(scope="templates", id="finished cookie")])

Variable
--------

A :class:`citrine.informatics.ara.Variable` object specifies how to select a piece of data from each Material History. Thus, it serves as a mapping from the set of Material Histories to a column in the Ara table.

.. code-block:: python

   from citrine.ara.variables import AttributeByTemplate
   final_density = AttributeByTemplateAfterProcessTemplate(
         name = "final density",
         attribute_template = LinkByUID(scope="templates", id="cookie density"),
         process_template = LinkByUID(scope="templates", id="apply glaze")

Column
------

A :class:`citrine.informatics.ara.Column` object describes how to transform a Variable into a primitive value (e.g. a real number, an integer, or a string) that can be entered into a table.  This is necessary because GEMD Attributes are more general than primitive values; they often conveying uncertainty estimates, for example.

.. code-block:: python

   from citrine.ara.columns import MeanColumn, StdColumn
   final_density_mean = MeanColumn(data_source="final density", target_units="g/cm^3")
   final_density_std = MeanColumn(data_source="final density", target_units="g/cm^3")

The data_source parameter is a reference to a Variable for this Column to describe, so the value of data_source must match the name of a Variable.

Ara Definition
--------------

The :class:`citrine.informatics.ara.AraDefinition` object defines how to build an Ara Table. It specifies a list of UUIDs for datasets to query in generating the table, a list of :class:`citrine.informatics.ara.Row` objects that define material histories to use as rows, and a list of :class:`citrine.informatics.ara.Variable` objects that specify how to extract data from those material histories into columns.

.. code-block:: python

   from citrine.resources.ara_definition import AraDefinition
   ara_defn = AraDefinition(
         name = "cookies",
         description = "Cookie densities",
         datasets = [UUID("7d040451-7cfb-45ca-9e0e-4b2b7010edd6")],
         variables = [final_density],
         rows = [row_def],
         columns = [final_density_mean, final_density_std])

AraDefinitionCollection
-----------------------

An :class:`citrine.informatics.ara.AraDefinitionCollection` object facilitates access to the collection of all Ara definitions associated with a Project. Via such an object, one can preview an AraDefinition on an explicit set of roots (rows):

For example:

.. code-block:: python

   from citrine.resources.ara_definition import AraDefinitionCollection
   defns = AraDefinitionCollection(
         project_id = UUID("9c89908e-674e-409e-a644-a04fb014a9c9"),
         session = citrine_session))
   preview = defns.preview(
         defn = ara_defn,
         preview_roots = [
               LinkByUID(scope="products", id="best cookie ever"),
               LinkByUID(scope="products", id="worst cookie ever")])

Reading tables
--------------

A Table can be generated by calling the build() method on a :class:`citrine.informatics.TableCollection` object.  (A TableCollection manages tables associated with a project.)  The :func:`citrine.informatics.resources.TableCollection.read()` method of a Table object downloads the tabular data from the Citrine Platform backend and stores it to a local client-side file.

.. code-block:: python

   from citrine.resources.table import TableCollection
   table_collection = TableCollection(
         project_id = UUID("aadc0c2e-e6b8-4abd-a366-2477418a7b71"),
         session = citrine_session)
   table = table_collection.build(preview)
   table.read("/usr/local/pastry_informatics/ara_table_example.csv")
