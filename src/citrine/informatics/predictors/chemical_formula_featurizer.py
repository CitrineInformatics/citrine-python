from typing import List, Optional

from citrine._rest.resource import Resource
from citrine._serialization import properties as _properties
from citrine.informatics.descriptors import ChemicalFormulaDescriptor, Descriptor
from citrine.informatics.predictors import Predictor

__all__ = ['ChemicalFormulaFeaturizer']


class ChemicalFormulaFeaturizer(Resource['ChemicalFormulaFeaturizer'], Predictor):
    """
    A featurizer for chemical formulae. Inspired by Magpie.

    The ChemicalFormulaFeaturizer computes a configurable set of features on chemical formula data.
    The features are functions of element-level properties, which are inspired by
    `Magpie <https://bitbucket.org/wolverton/magpie/src/master/>`_. The features are configured
    using the ``features`` and ``excludes`` arguments, which accept either feature names or
    predefined aliases. Many features are element-wise weighted means of element-level properties.
    How to compute the mean is configured using the ``powers`` argument.

    The default is the "standard" alias, corresponding to features that are intuitive and
    often correlate with properties of interest. Other aliases are "physical," "electronic,"
    and "periodicTable."

    The following features are element-wise means of elemental properties.

    - "Pauling electronegativity"
    - "Number of d valence electrons"
    - "Number of unfilled f valence electrons"
    - "Number of f valence electrons"
    - "Number of unfilled p valence electrons"
    - "Number of p valence electrons"
    - "Number of unfilled s valence electrons"
    - "Number of s valence electrons"
    - "Total number of unfilled valence electrons"
    - "Total number of valence electrons"
    - "Elemental work function"
    - "Elemental polarizability"
    - "Radius of d orbitals"

    Parameters
    ----------
    input_descriptor: ChemicalFormulaDescriptor
        the descriptor to featurize
    features: Optional[List[str]]
        The list of features to compute, either by name or by group alias. Default is "standard."
    excludes: Optional[List[str]]
        The list of features to exclude, either by name or by group alias. Default is none.
        The final set of features generated by the predictor is set(features) - set(excludes).
    powers: Optional[List[int]]
        The list of powers to use when computing generalized weighted means of element properties.
        p=1 corresponds to the ordinary mean, p=2 is the root mean square, etc.

    """

    input_descriptor = _properties.Object(Descriptor, 'config.input')
    features = _properties.List(_properties.String, 'config.features')
    excludes = _properties.List(_properties.String, 'config.excludes')
    powers = _properties.List(_properties.Integer, 'config.powers')

    typ = _properties.String('config.type', default='ChemicalFormulaFeaturizer',
                             deserializable=False)

    # NOTE: These could go here or in _post_dump - it's unclear which is better right now
    module_type = _properties.String('module_type', default='PREDICTOR')

    def __init__(self,
                 name: str,
                 description: str,
                 input_descriptor: ChemicalFormulaDescriptor,
                 features: Optional[List[str]] = None,
                 excludes: Optional[List[str]] = None,
                 powers: Optional[List[int]] = None):
        self.name = name
        self.description = description
        self.input_descriptor = input_descriptor
        self.features = features if features is not None else ["standard"]
        self.excludes = excludes if excludes is not None else []
        self.powers = powers if powers is not None else [2]

    def _post_dump(self, data: dict) -> dict:
        data['display_name'] = data['config']['name']
        return data

    def __str__(self):
        return '<ChemicalFormulaFeaturizer {!r}>'.format(self.name)
